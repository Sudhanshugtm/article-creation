import{I as a}from"./WikidataEnhancementService-2MvXLlqh-CZaRwsxB.js";var l=Object.defineProperty,g=(c,e,t)=>e in c?l(c,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[e]=t,o=(c,e,t)=>g(c,typeof e!="symbol"?e+"":e,t);class d{constructor(){o(this,"applyButton"),o(this,"clearButton"),o(this,"selectedSuggestions",new Set),o(this,"wikidataService"),o(this,"isLoading",!1),o(this,"handleApplyClick",()=>{this.applySuggestions()}),o(this,"handleClearClick",()=>{this.clearSelections()}),o(this,"handleFactCheckboxChange",e=>{const t=e.target,s=t.dataset.fact;t.checked?this.selectedSuggestions.add(`fact-${s}`):this.selectedSuggestions.delete(`fact-${s}`),this.updateActionButtons()}),o(this,"handleSectionButtonClick",e=>{const t=e.currentTarget,s=t.closest(".suggestion-item--section"),i=s.dataset.section,n=`section-${i}`;console.log(`Section clicked: ${i}, ID: ${n}`),console.log("Currently selected:",Array.from(this.selectedSuggestions)),this.selectedSuggestions.has(n)?(console.log(`Deselecting ${n}`),this.selectedSuggestions.delete(n),t.classList.remove("selected"),s.classList.remove("selected")):(console.log(`Selecting ${n}`),this.selectedSuggestions.add(n),t.classList.add("selected"),s.classList.add("selected")),console.log(`New selection count: ${this.selectedSuggestions.size}`),console.log(`Button has selected class: ${t.classList.contains("selected")}`),this.updateActionButtons()}),this.applyButton=document.getElementById("applyButton"),this.clearButton=document.getElementById("clearButton"),this.wikidataService=new a,console.log("Class-based manager: Loading API data only"),this.loadWikidataSuggestions().catch(e=>{console.error("Failed to load Wikidata suggestions:",e)})}async loadWikidataSuggestions(){this.isLoading=!0,this.showLoadingState();try{const e=this.getExistingArticleContent(),t=await this.wikidataService.getEnhancementSuggestions(e);this.renderSuggestions(t),this.updateSuggestionCount(t.length)}catch(e){console.error("Error loading Wikidata suggestions:",e)}finally{this.isLoading=!1,this.hideLoadingState()}}getExistingArticleContent(){return`
            Katie Bouman is an American computer scientist and engineer.
            After earning her doctorate, Bouman joined Harvard University as a postdoctoral fellow 
            on the Event Horizon Telescope Imaging team. Bouman joined Event Horizon Telescope project in 2013.
            She led the development of an algorithm for imaging black holes, known as Continuous High-resolution 
            Image Reconstruction using Patch priors (CHIRP). Bouman received significant media attention after 
            a photo, showing her reaction to the detection of the black hole shadow in the EHT images, went viral.
        `}renderSuggestions(e){const t=e.filter(i=>i.type==="fact"),s=e.filter(i=>i.type==="section");t.length>0&&this.renderFactSuggestions(t),s.length>0&&this.renderSectionSuggestions(s),this.reinitializeEventListeners()}renderFactSuggestions(e){const t=document.querySelector(".suggestion-section");if(!t)return;const s=t.querySelector(".suggestion-list");s&&(s.innerHTML="",e.forEach(i=>{const n=document.createElement("label");n.className="suggestion-item",n.innerHTML=`
                <input type="checkbox" class="suggestion-item__checkbox" data-fact="${i.id}">
                <div class="suggestion-item__content">
                    <div class="suggestion-item__text">${i.content}</div>
                    ${i.hint?`<div class="suggestion-item__hint">${i.hint}</div>`:""}
                </div>
            `,s.appendChild(n)}))}renderSectionSuggestions(e){const t=document.querySelectorAll(".suggestion-section")[1];if(!t)return;const s=t.querySelector(".suggestion-list");s&&(s.innerHTML="",e.forEach(i=>{const n=document.createElement("div");n.className="suggestion-item suggestion-item--section",n.dataset.section=i.id,n.innerHTML=`
                <button class="suggestion-item__add-btn">+</button>
                <div class="suggestion-item__content">
                    <div class="suggestion-item__text">${i.title}</div>
                    <div class="suggestion-item__hint">${i.hint||"From Wikidata"}</div>
                </div>
            `,s.appendChild(n)}))}reinitializeEventListeners(){this.initializeFactCheckboxes(),this.initializeSectionButtons(),this.applyButton&&(this.applyButton.removeEventListener("click",this.handleApplyClick),this.applyButton.addEventListener("click",this.handleApplyClick)),this.clearButton&&(this.clearButton.removeEventListener("click",this.handleClearClick),this.clearButton.addEventListener("click",this.handleClearClick))}showLoadingState(){var e;const t=document.createElement("div");t.id="loading-suggestions",t.className="suggestions-loading",t.innerHTML=`
            <div class="suggestions-loading__content">
                <div class="suggestions-loading__spinner"></div>
                <p>Loading suggestions from Wikidata...</p>
            </div>
        `,(e=document.querySelector(".suggestions-page__main"))==null||e.prepend(t)}hideLoadingState(){const e=document.getElementById("loading-suggestions");e&&e.remove()}updateSuggestionCount(e){const t=document.getElementById("suggestionCount");t&&(t.textContent=`${e} ideas`)}initializeEventListeners(){this.initializeFactCheckboxes(),this.initializeSectionButtons(),this.applyButton&&(this.applyButton.removeEventListener("click",this.handleApplyClick),this.applyButton.addEventListener("click",this.handleApplyClick)),this.clearButton&&(this.clearButton.removeEventListener("click",this.handleClearClick),this.clearButton.addEventListener("click",this.handleClearClick))}initializeFactCheckboxes(){const e=document.querySelectorAll(".suggestion-item__checkbox");console.log(`Initializing ${e.length} fact checkboxes`),e.forEach(t=>{t.removeEventListener("change",this.handleFactCheckboxChange),t.addEventListener("change",this.handleFactCheckboxChange)})}initializeSectionButtons(){const e=document.querySelectorAll(".suggestion-item__add-btn");console.log(`Initializing ${e.length} section buttons`),e.forEach((t,s)=>{const i=t.closest(".suggestion-item--section"),n=i==null?void 0:i.getAttribute("data-section");console.log(`Button ${s}: section-${n}`),t.removeEventListener("click",this.handleSectionButtonClick),t.addEventListener("click",this.handleSectionButtonClick)})}updateActionButtons(){console.log(`updateActionButtons called with count: ${this.selectedSuggestions.size}`);const e=this.selectedSuggestions.size;if(!this.applyButton){console.error("Apply button not found!");return}this.applyButton.disabled=e===0;const t=document.getElementById("selectionCount"),s=document.getElementById("pluralS");if(!t||!s){console.error("Selection count elements not found!",{selectionCount:!!t,pluralS:!!s});return}t.textContent=e.toString(),s.style.display=e===1?"none":"inline",console.log(`Updated UI: count=${e}, buttonDisabled=${this.applyButton.disabled}`)}clearSelections(){document.querySelectorAll(".suggestion-item__checkbox").forEach(e=>{e.checked=!1}),document.querySelectorAll(".suggestion-item__add-btn").forEach(e=>{e.classList.remove("selected")}),document.querySelectorAll(".suggestion-item--section").forEach(e=>{e.classList.remove("selected")}),this.selectedSuggestions.clear(),this.updateActionButtons()}async applySuggestions(){if(console.log("=== APPLY SUGGESTIONS CALLED ==="),console.log("Selected suggestions:",Array.from(this.selectedSuggestions)),this.selectedSuggestions.size===0){console.warn("No suggestions selected");return}const e=Array.from(this.selectedSuggestions);sessionStorage.setItem("selectedSuggestions",JSON.stringify(e)),console.log("Stored in sessionStorage:",e),this.showSuccessFeedback(),this.storeWikidataBackground(),setTimeout(()=>{console.log("Navigating to expansion page...");try{window.location.assign("./section-expansion.html")}catch(t){console.error("Navigation failed, trying alternative:",t),window.location.replace("./section-expansion.html")}},500)}async storeWikidataBackground(){try{console.log("Starting background Wikidata storage...");const e=this.getExistingArticleContent(),t=await this.wikidataService.getEnhancementSuggestions(e);sessionStorage.setItem("wikidataSuggestions",JSON.stringify(t)),console.log("Background: Stored Wikidata suggestions:",t)}catch(e){console.error("Background: Error storing Wikidata suggestions:",e)}}showSuccessFeedback(){const e=this.selectedSuggestions.size,t=document.createElement("div");t.className="success-feedback",t.textContent=`âœ“ ${e} suggestion${e===1?"":"s"} will be applied!`,document.body.appendChild(t),setTimeout(()=>{t.remove()},3e3)}}document.addEventListener("DOMContentLoaded",()=>{console.log("=== INITIALIZING SUGGESTIONS PAGE ==="),new d().initializeEventListeners()});
